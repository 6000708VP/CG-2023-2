<html>
  <head>
    <meta charset="UTF-8">
    <title> ocultamiento Z-Buffering en THREE.js</title>
  </head>
  <body>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script>
      
    </script>
  </body>
</html>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Parcial Segundo corte</title>
</head>
<body>
    
    <script type="module">

       // Se crea escena y camara
      const scene = new THREE.Scene();
      const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
      const renderer = new THREE.WebGLRenderer();
      renderer.setSize(window.innerWidth, window.innerHeight);
      document.body.appendChild(renderer.domElement);

    
      const cubeGeometry = new THREE.BoxGeometry(1, 1, 1); // crea cubo
      const torusGeometry = new THREE.TorusGeometry(1, 0.2, 16, 100); // crea geometria toro
      const sphereGeometry = new THREE.SphereGeometry(1, 32, 32); // crea esfera 

      const torusMaterial = new THREE.MeshNormalMaterial(); // material del toro
      const sphereMaterial = new THREE.MeshNormalMaterial(); // material de la espera 
      const cubeMaterial = new THREE.MeshNormalMaterial(); // material del cubo

      const sphere = new THREE.Mesh(sphereGeometry, sphereMaterial);
      const cube = new THREE.Mesh(cubeGeometry, cubeMaterial);
      const torus = new THREE.Mesh(torusGeometry, torusMaterial);

      sphere.position.x = -2;
      cube.position.x = 0;
      torus.position.x = 2;

      // Se agregan los objetos que se crearon a la escena
      scene.add(sphere);
      scene.add(cube);
      scene.add(torus);

      // posici칩n de la c치mara
      camera.position.z = 5;

      // Agregar una luz 
      const pinkLight = new THREE.PointLight(0xff00ff, 1, 100);
      pinkLight.position.set(2, 2, 2);
      scene.add(pinkLight);

      // Renderiza la escena y hace que la c치mara gire
      function animate() {
        requestAnimationFrame(animate);

     
        camera.position.x = 5 * Math.cos(Date.now() * 0.001);
        camera.position.z = 5 * Math.sin(Date.now() * 0.001);
        camera.lookAt(0, 0, 0);

        //Rota los objetos
        sphere.rotation.x += 0.01;
        cube.rotation.y += 0.01;
        torus.rotation.z += 0.01;

        renderer.render(scene, camera);
      }

      animate();
            // Funci칩n para trazar ejes
            function trazarEjes() {
                const axesHelper = new THREE.AxesHelper(5); // Longitud de los ejes
                scene.add(axesHelper);
            }
            trazarEjes(); 
           


        camera.position.z = 5;
        camera.position.x = 2;
        camera.position.y = 2;

     


    </script>
</body>
</html>
